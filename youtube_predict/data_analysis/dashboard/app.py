import streamlit as st
import pandas as pd
import plotly.express as px
from utils import load_data

# Configurar t√≠tulo e layout
st.set_page_config(page_title="Painel de An√°lise do YouTube", layout="wide")

# Criar t√≠tulo
st.title("üìä Fabrica de Monstros - Painel de An√°lise de Tend√™ncias")

# Carregar os dados do banco SQLite
df_videos = load_data()


# DEPURA√á√ÉO: Verificar se a coluna 'video_type' est√° carregada corretamente
# st.subheader("üöÄ Debug: Verificando 'video_type'")
# if "video_type" not in df_videos.columns:
#     st.error("üö® ERRO: A coluna 'video_type' n√£o foi encontrada no DataFrame!")
# else:
#     st.write("üìå Tipos de v√≠deos dispon√≠veis:", df_videos["video_type"].unique())
# FIM DA DEPURA√á√ÉO


# Converter a coluna 'published_at' para datetime
df_videos["published_at"] = pd.to_datetime(df_videos["published_at"], errors="coerce").dt.tz_localize(None)

# Criar filtros no menu lateral
st.sidebar.header("üîç Filtros")
video_type = st.sidebar.selectbox("Tipo de V√≠deo", ["Todos", "Short", "Longo"])
date_range = st.sidebar.date_input("Selecione o per√≠odo", [])

# Criar DataFrame atualizado com base nos filtros
df_filtered = df_videos.copy()

# Aplicar filtro de tipo de v√≠deo
if video_type != "Todos":
    df_filtered = df_filtered[df_filtered["video_type"] == video_type]

# Aplicar filtro de data corretamente
if date_range and len(date_range) == 2:
    start_date, end_date = pd.to_datetime(date_range).tz_localize(None)
    df_filtered = df_filtered[
        (df_filtered["published_at"] >= start_date) &
        (df_filtered["published_at"] <= end_date)
    ]

# üì¢ Se nenhum dado for encontrado ap√≥s a filtragem
if df_filtered.empty:
    st.warning("‚ö†Ô∏è Nenhum dado encontrado para os filtros aplicados.")
    st.stop()

# üîπ Criar m√©tricas principais üîπ
col1, col2, col3 = st.columns(3)

with col1:
    st.metric("üé• Total de V√≠deos", df_filtered.shape[0])
    st.metric("üìà M√©dia de Visualiza√ß√µes", f"{df_filtered['views'].mean():,.0f}")
    st.metric("‚è≥ Tempo Total de Exibi√ß√£o", f"{df_filtered['duration_sec'].sum()/60:,.0f} min")

with col2:
    st.metric("üëç M√©dia de Likes", f"{df_filtered['likes'].mean():,.0f}")
    st.metric("üí¨ M√©dia de Coment√°rios", f"{df_filtered['comments'].mean():,.0f}")
    st.metric("üìä Taxa de Reten√ß√£o (m√©dia)", f"{(df_filtered['duration_sec'].mean() / df_filtered['duration_sec'].max())*100:.2f}%")

# Evitar erro se a coluna CTR n√£o existir
if "ctr" in df_filtered.columns:
    ctr_medio = df_filtered["ctr"].mean()
    ctr_medio = round(ctr_medio, 2) if not pd.isna(ctr_medio) else "N/A"
else:
    ctr_medio = "N/A"  # Se a coluna n√£o existir, exibe "N/A"

# Evitar erro se a coluna `traffic_source` n√£o existir
if "traffic_source" in df_filtered.columns and not df_filtered["traffic_source"].isna().all():
    fonte_trafego = df_filtered["traffic_source"].mode()[0]
else:
    fonte_trafego = "Desconhecido"

# Evitar erro se a coluna `device` n√£o existir
if "device" in df_filtered.columns and not df_filtered["device"].isna().all():
    dispositivo_mais_usado = df_filtered["device"].mode()[0]
else:
    dispositivo_mais_usado = "Desconhecido"

with col3:
    st.metric("üì¢ CTR M√©dio (Click-Through Rate)", f"{ctr_medio}%")
    st.metric("üåé Fonte de Tr√°fego Principal", fonte_trafego)
    st.metric("üì± Dispositivo Mais Usado", df_filtered["device"].mode()[0])

# üìä Criar abas para melhor organiza√ß√£o
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìä Visualiza√ß√µes ao Longo do Tempo",
    "üìà Correla√ß√£o Dura√ß√£o x Visualiza√ß√µes",
    "üí¨ Engajamento: Shorts vs Longos",
    "üìÖ Desempenho por Dia da Semana",
    "üìè Distribui√ß√£o de Dura√ß√£o"
])

# üìä Gr√°fico de Visualiza√ß√µes ao longo do tempo (corrigido)
with tab1:
    st.subheader("üìà Evolu√ß√£o das Visualiza√ß√µes")
    df_plot = df_filtered.copy()
    df_plot["published_at"] = df_plot["published_at"].dt.date
    df_plot = df_plot.groupby("published_at", as_index=False)["views"].sum()

    if df_plot.empty or df_plot["views"].sum() == 0:
        st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel no per√≠odo selecionado.")
    else:
        fig = px.line(df_plot, x="published_at", y="views", title="Visualiza√ß√µes ao Longo do Tempo")
        st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.subheader("‚è≥ Correla√ß√£o entre Dura√ß√£o do V√≠deo e Visualiza√ß√µes")
    if df_filtered.empty:
        st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel para exibi√ß√£o.")
    else:
        # Remover linhas com valores nulos ou zero em 'duration_sec' ou 'views'
        df_plot = df_filtered.dropna(subset=['duration_sec', 'views'])
        df_plot = df_plot[(df_plot['duration_sec'] > 0) & (df_plot['views'] > 0)]

        if df_plot.empty:
            st.warning("‚ö†Ô∏è Dados insuficientes ap√≥s a limpeza para gerar o gr√°fico.")
        else:
            fig = px.scatter(df_plot, x=df_plot["duration_sec"] / 60, y="views", 
                             title="Dura√ß√£o do V√≠deo vs Visualiza√ß√µes", 
                             labels={"x": "Dura√ß√£o (minutos)", "y": "Visualiza√ß√µes"})
            st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.subheader("üí¨ Compara√ß√£o de Engajamento (Likes e Coment√°rios) entre Shorts e Longos")
    if df_filtered.empty:
        st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel para este per√≠odo.")
    else:
        df_engajamento = df_filtered.groupby("video_type")[["likes", "comments"]].mean().reset_index()
        fig = px.bar(df_engajamento, x="video_type", y=["likes", "comments"], barmode="group", 
                     title="Engajamento M√©dio por Tipo de V√≠deo")
        st.plotly_chart(fig, use_container_width=True)

# üìÖ Desempenho por Dia da Semana
with tab4:
    st.subheader("üìÖ Desempenho por Dia da Semana")
    if df_filtered.empty:
        st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel para exibi√ß√£o.")
    else:
        df_filtered["weekday"] = df_filtered["published_at"].dt.day_name()
        df_plot = df_filtered.groupby("weekday")["views"].mean().reset_index()
        fig = px.bar(df_plot, x="weekday", y="views", title="M√©dia de Visualiza√ß√µes por Dia da Semana")
        st.plotly_chart(fig, use_container_width=True)

# üìè Distribui√ß√£o da Dura√ß√£o dos V√≠deos
with tab5:
    st.subheader("üìè Distribui√ß√£o da Dura√ß√£o dos V√≠deos")
    if df_filtered.empty:
        st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel para este per√≠odo.")
    else:
        fig = px.histogram(df_filtered, x=df_filtered["duration_sec"] / 60, nbins=20, 
                           title="Distribui√ß√£o da Dura√ß√£o dos V√≠deos", labels={"x": "Dura√ß√£o (minutos)"})
        st.plotly_chart(fig, use_container_width=True)

# Rodar o Streamlit:
# No terminal, execute: streamlit run app.py

TEST = TEST.WEBHOOK.DISCORD